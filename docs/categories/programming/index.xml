<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming on dakatsuka&#39;s blog</title>
    <link>https://blog.dakatsuka.jp/categories/programming.html</link>
    <description>Recent content in Programming on dakatsuka&#39;s blog</description>
    <image>
      <title>dakatsuka&#39;s blog</title>
      <url>https://blog.dakatsuka.jp/images/card.png</url>
      <link>https://blog.dakatsuka.jp/images/card.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 06 May 2023 17:30:00 +0900</lastBuildDate><atom:link href="https://blog.dakatsuka.jp/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin &#43; Gradleで別パッケージの src/test/resources を参照する方法</title>
      <link>https://blog.dakatsuka.jp/2023/05/06/kotlin-src-test.html</link>
      <pubDate>Sat, 06 May 2023 17:30:00 +0900</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2023/05/06/kotlin-src-test.html</guid>
      <description>Kotlinでテストを書くときに、別パッケージの src/test/resources を参照したいケースがある。たとえばインフラストラクチャ層のテストリソースを別のサブプロジェ</description>
    </item>
    
    <item>
      <title>OCaml 4.08.0から使えるBinding operatorsが便利だった</title>
      <link>https://blog.dakatsuka.jp/2021/01/11/ocaml-binding-operators.html</link>
      <pubDate>Mon, 11 Jan 2021 19:20:00 +0900</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2021/01/11/ocaml-binding-operators.html</guid>
      <description>OCaml 4.08.0 で Binding operators 1 という機能が導入されていました。これでOCamlでもHaskellのdo記法やScalaのfor式に近いかたちでモナディックな計</description>
    </item>
    
    <item>
      <title>The Magnet PatternでAkka HTTPのonSuccessで処理できる型を増やす</title>
      <link>https://blog.dakatsuka.jp/2017/02/18/akka-http-onsuccess-magnet.html</link>
      <pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2017/02/18/akka-http-onsuccess-magnet.html</guid>
      <description>Akka HTTPの onSuccess ディレクティブは The Magnet Pattern によって実装されているのでOnSuccessMagnet型クラスのインスタンスさえ定義してしまえば割りと</description>
    </item>
    
    <item>
      <title>Akka HTTPのDirective0の使い勝手が良くないのでどうにかする話</title>
      <link>https://blog.dakatsuka.jp/2017/02/04/akka-http-directive.html</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2017/02/04/akka-http-directive.html</guid>
      <description>まずDirective0とDirective1の型定義を見て欲しい。 type Directive0 = Directive[Unit] type Directive1[T] = Directive[Tuple1[T]] Directive0がDirective1[Unit]で</description>
    </item>
    
    <item>
      <title>Akka HTTPで認証機能を手軽に実装する方法</title>
      <link>https://blog.dakatsuka.jp/2016/12/05/akka-http-authentication.html</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2016/12/05/akka-http-authentication.html</guid>
      <description>これはScala Advent Calendar 2016の5日目です。埋まっていなかったので1日遅れでしれっと書くよ。 Akka HTTPには AuthenticationDirective という認証のためのディレクティブが</description>
    </item>
    
    <item>
      <title>OCamlでLuhnアルゴリズムを書いてみる</title>
      <link>https://blog.dakatsuka.jp/2016/02/22/ocaml-luhn.html</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2016/02/22/ocaml-luhn.html</guid>
      <description>OCamlに慣れるために何か書こうと思ったけど、あまりいいネタが思い浮かばなかったのでLuhnアルゴリズムを書いてみた。クレジットカードの番</description>
    </item>
    
    <item>
      <title>OCamlの開発環境を整えた</title>
      <link>https://blog.dakatsuka.jp/2016/01/31/setup-ocaml.html</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2016/01/31/setup-ocaml.html</guid>
      <description>本当はローカルのMac OS X上に開発環境を構築したのだけど、メモを取り忘れていたので、改めてVagrantで起動したUbuntu 15.10上で</description>
    </item>
    
    <item>
      <title>finagle-mysqlのClient (IO Context) をReaderTで受け取る</title>
      <link>https://blog.dakatsuka.jp/2015/12/15/finagle-mysql-readert.html</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/12/15/finagle-mysql-readert.html</guid>
      <description>下準備としてパッケージオブジェクトあたりに以下のおまじないを書いておく1 この時点ですでに面倒だ！ import com.twitter.util.Future import scalaz._ import Scalaz._ implicit def FutureFunctor: Functor[Future] = new Functor[Future] { def map[A, B](f: Future[A])(map: A =&amp;gt; B): Future[B]</description>
    </item>
    
    <item>
      <title>FinchのEndpointのテスト方法を調べた</title>
      <link>https://blog.dakatsuka.jp/2015/12/13/finch-endpoint-test.html</link>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/12/13/finch-endpoint-test.html</guid>
      <description>Finchはエンドポイントを作るときに戻り値を型で縛れるので、正常系のレスポンスに関してはコンパイラを信用して大丈夫だろう。ただし、ステータ</description>
    </item>
    
    <item>
      <title>ScalaでLuaスクリプトを動かして遊ぶ</title>
      <link>https://blog.dakatsuka.jp/2015/12/10/luaj.html</link>
      <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/12/10/luaj.html</guid>
      <description>これはScala Advent Calendar 2015（Adventar版）10日目です。9日目はShinpeimさんの既存のクラスをScalazで定義されている型ク</description>
    </item>
    
    <item>
      <title>Finch &#43; MySQLでREST APIサーバを構築する</title>
      <link>https://blog.dakatsuka.jp/2015/12/07/finch.html</link>
      <pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/12/07/finch.html</guid>
      <description>これはScala Advent Calendar 2015（Adventar版）7日目です。6日目はHiroyuki-NagataさんのScalatraとnon-bloc</description>
    </item>
    
    <item>
      <title>HTTPSに移行した</title>
      <link>https://blog.dakatsuka.jp/2015/12/01/https.html</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/12/01/https.html</guid>
      <description>さくらのSSL1でRapidSSLが1年分無料になるキャンペーンをやっていたので、このブログを思い切ってHTTPSに移行した。最初はClou</description>
    </item>
    
    <item>
      <title>http4sでHTTPSを有効にする</title>
      <link>https://blog.dakatsuka.jp/2015/11/22/http4s-with-ssl.html</link>
      <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/11/22/http4s-with-ssl.html</guid>
      <description>SSLSupportパッケージをインポートしてBlazeBuilderの.withSSLにKeyStoreの情報を渡せばHTTPSが有効にな</description>
    </item>
    
    <item>
      <title>activerecord-importとelasticsearch-railsでメソッドが被る問題</title>
      <link>https://blog.dakatsuka.jp/2015/11/18/activerecord-import.html</link>
      <pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/11/18/activerecord-import.html</guid>
      <description>どちらのgemもActiveRecordモデルにimportメソッドを生やそうとする。 いい感じに共存させる方法をググっていたら同じことをIs</description>
    </item>
    
    <item>
      <title>ScalaのHTTPインターフェース http4s 超入門</title>
      <link>https://blog.dakatsuka.jp/2015/11/14/http4s.html</link>
      <pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/11/14/http4s.html</guid>
      <description>What&amp;rsquo;s http4s RackやWSGIのScala版といったところ。公式サイトの説明も次のように書いてある。 http4s is a minimal, idiomatic Scala interface for HTTP. http4s is Scala&amp;rsquo;s answer to Ruby&amp;rsquo;s Rack, Python&amp;rsquo;s WSGI, Haskell&amp;rsquo;s WAI, and Java&amp;rsquo;s Servlets. ま</description>
    </item>
    
    <item>
      <title>scala.concurrent.Futureをscalaz.concurrent.Taskに変換する方法</title>
      <link>https://blog.dakatsuka.jp/2015/11/07/future-to-task-transformer.html</link>
      <pubDate>Sat, 07 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/11/07/future-to-task-transformer.html</guid>
      <description>あまり良い方法では無さそうだけど他に思いつかなかった import scala.concurrent.Future import scala.concurrent.ExecutionContext.Implicits.global import scala.util.{Success, Failure} import scalaz.concurrent.Task import scalaz.syntax.either._ implicit class FutureToTaskTransformer[+A](future: Future[A]) { def toTask: Task[A] = { Task.async { register =&amp;gt; future.onComplete { case Success(v) =&amp;gt; register(v.right) case Failure(e) =&amp;gt; register(e.left) } } } } Futur</description>
    </item>
    
    <item>
      <title>CircleCIでElasticsearchを使うならDockerがよさそう</title>
      <link>https://blog.dakatsuka.jp/2015/08/22/elasticsearch-on-circleci.html</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/08/22/elasticsearch-on-circleci.html</guid>
      <description>CircleCIでElasticsearchの最新版とKuromojiを使うならDockerが便利だった。circle.ymlでwgetして</description>
    </item>
    
    <item>
      <title>Play Framework 2.x でマルチプロジェクト構成にするには</title>
      <link>https://blog.dakatsuka.jp/2015/06/11/play-multiple-project.html</link>
      <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.dakatsuka.jp/2015/06/11/play-multiple-project.html</guid>
      <description>ドメイン層（普通のScalaプロジェクト）とアプリケーション層（Play）でsbtプロジェクトを分けたい場合は、sbtのマルチプロジェクトを</description>
    </item>
    
  </channel>
</rss>
